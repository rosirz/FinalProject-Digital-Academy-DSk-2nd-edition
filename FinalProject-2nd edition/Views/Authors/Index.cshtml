@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@model FinalProject_2nd_edition.Models.AuthorViewModel_List
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>
@if ((await AuthorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}
@using (Html.BeginForm())
{
    <p>
        Search by name: @Html.TextBox("SearchString")  
        <input type="submit" value="Search" /></p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                Author name
            </th>
            <th>
                Author details
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.List)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Details)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.AuthorId">Details</a>
                    @if ((await AuthorizationService.AuthorizeAsync(User, "RequireAdministratorRole")).Succeeded)
                    {
                        <a asp-action="Edit" asp-route-id="@item.AuthorId">Edit</a> 
                        <a asp-action = "Delete" asp-route-id = "@item.AuthorId" > Delete </a >
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="...">
        <ul class="pagination">
            @if (Model.CurrentPage == 1)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" href="/Authors/Index?currentPage=@(Model.CurrentPage-1)" tabindex="-1">Previous</a>
                </li>
            }
            @for (int i = 0; i < Model.TotalPages; i++)
            {
                if (i + 1 == Model.CurrentPage)
                {
                    <li class="page-item active">
                        <a class="page-link" href="/Authors/Index?currentPage=@(i + 1)">@(i + 1) <span class="sr-only">(current)</span></a>
                    </li>
                }
                else
                {
                    <li class="page-item"><a class="page-link" href="/Authors/Index?currentPage=@(i + 1)">@(i + 1)</a></li>
                }
            }

            @if (Model.CurrentPage == Model.TotalPages)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#">Next</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" href="/Authors/Index?currentPage=@(Model.CurrentPage+1)">Next</a>
                </li>
            }

        </ul>
    </nav>
